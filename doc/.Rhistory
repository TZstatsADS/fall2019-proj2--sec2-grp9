surprise=mean(surprise),
trust=mean(trust),
#negative=mean(negative),
#positive=mean(positive)
)
names(sentence.list)
presid.summary=tbl_df(sentence.list)%>%
filter(type=="nomin", File%in%sel.comparison)%>%
#group_by(paste0(type, File))%>%
group_by(File)%>%
summarise(
anger=mean(anger),
anticipation=mean(anticipation),
disgust=mean(disgust),
fear=mean(fear),
joy=mean(joy),
sadness=mean(sadness),
surprise=mean(surprise),
trust=mean(trust)
#negative=mean(negative),
#positive=mean(positive)
)
presid.summary=as.data.frame(presid.summary)
rownames(presid.summary)=as.character((presid.summary[,1]))
km.res=kmeans(presid.summary[,-1], iter.max=200,
5)
fviz_cluster(km.res,
stand=F, repel= TRUE,
data = presid.summary[,-1], xlab="", xaxt="n",
show.clust.cent=FALSE)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:positive)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:positive)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1",
"lightgray", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:positive)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:trust)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:trust)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T, main="Inaugural Speeches")
shiny::runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
shiny::runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install_github('arilamstein/choroplethrZip@v1.4.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install.packages("choroplethr")
install.packages("choroplethr")
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
zip_choropleth
render
c$render
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.4.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
install.packages("ggplot2")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("choroplethr")
install.packages("ggplot2")
install.packages("ggmap")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
NYC_map = get_googlemap(center = "New York", maptype = "roadmap",
zoom = 11, size = c(640, 420), color = "bw")
ggmap(NYC_map, extent = "device") +
geom_point(data = mh2009.selgeo, aes(x = lon, y = lat),
color = "#0571b0", size = 3)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
names(mh2009.selgeo)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap", force=TRUE)
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=9,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=13,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if(!require("ggmap")) install.packages('ggmap')
library(choroplethrZip)
if (!require("choroplethrZip")) install.packages("choroplethrZip")
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(30)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
mh2009.selgeo=mh2009.selgeo%>%
na.omit()
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
ggmap(get_map("New York City",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybird",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("Manhattan",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
res <- read.csv(file="../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
res <- read.csv(file="../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
library(dplyr)
library(lubridate)
top.ten.cuisines <- top_n(data.frame(table(res$CUISINE.DESCRIPTION)), 10, Freq)
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y"))) %>% #Create month variable
filter(CUISINE.DESCRIPTION %in% top.ten.cuisines$Var1 & DATE >= "2015-01-01") %>% # Filter relevant cuisines and disregards old dates 2015
plyr::arrange(DATE) %>%
mutate(NEIGHBOURHOOD = case_when( #Create Neighborhood variable
ZIPCODE %in% c(10453, 10457, 10460) ~ "Central Bronx",
ZIPCODE %in% c(10458, 10467, 10468) ~ "Bronx Park and Fordham",
ZIPCODE %in% c(10451, 10452, 10456) ~ "High Bridge and Morrisania",
ZIPCODE %in% c(10454, 10455, 10459, 10474) ~ "Hunts Point and Mott Haven",
ZIPCODE %in% c(10463, 10471) ~ "Kingsbridge and Riverdale",
ZIPCODE %in% c(10466, 10469, 10470, 104750) ~ "Northeast Bronx",
ZIPCODE %in% c(10461, 10462,10464, 10465, 10472, 10473) ~ "Southeast Bronx",
ZIPCODE %in% c(11212, 11213, 11216, 11233, 11238) ~ "Central Brooklyn	",
ZIPCODE %in% c(11209, 11214, 11228) ~ "Southwest Brooklyn",
ZIPCODE %in% c(11204, 11218, 11219, 11230) ~ "Borough Park",
ZIPCODE %in% c(11234, 11236, 11239) ~ "Canarsie and Flatlands",
ZIPCODE %in% c(11223, 11224, 11229, 11235) ~ "Southern Brooklyn",
ZIPCODE %in% c(11201, 11205, 11215, 11217, 11231) ~ "Northwest Brooklyn",
ZIPCODE %in% c(11203, 11210, 11225, 11226) ~ "Flatbush",
ZIPCODE %in% c(11207, 11208) ~ "East New York and New Lots",
ZIPCODE %in% c(11211, 11222) ~ "Greenpoint",
ZIPCODE %in% c(11220, 11232) ~ "Sunset Park",
ZIPCODE %in% c(11206, 11221, 11237) ~ "Bushwick and Williamsburg",
ZIPCODE %in% c(10026, 10027, 10030, 10037, 10039) ~ "Central Harlem",
ZIPCODE %in% c(10001, 10011, 10018, 10019, 10020, 10036) ~ "Chelsea and Clinton",
ZIPCODE %in% c(10029, 10035) ~ "East Harlem",
ZIPCODE %in% c(10010, 10016, 10017, 10022) ~ "Gramercy Park and Murray Hill",
ZIPCODE %in% c(10012, 10013, 10014) ~ "Greenwich Village and Soho",
ZIPCODE %in% c(10004, 10005, 10006, 10007, 10038, 10280) ~ "Lower Manhattan	",
ZIPCODE %in% c(10002, 10003, 10009) ~ "Lower East Side",
ZIPCODE %in% c(10021, 10028, 10044, 10065, 10075, 10128) ~ "Upper East Side",
ZIPCODE %in% c(10023, 10024, 10025) ~ "Upper West Side",
ZIPCODE %in% c(10031, 10032, 10033, 10034, 10040) ~ "Inwood and Washington Heights",
ZIPCODE %in% c(11361, 11362, 11363, 11364) ~ "Northeast Queens",
ZIPCODE %in% c(11354, 11355, 11356, 11357, 11358, 11359, 11360) ~ "North Queens",
ZIPCODE %in% c(11365, 11366, 11367) ~ "Central Queens",
ZIPCODE %in% c(11412, 11423, 11432, 11433, 11434, 11435, 11436) ~ "Jamaica",
ZIPCODE %in% c(11101, 11102, 11103, 11104, 11105, 11106) ~ "Northwest Queens",
ZIPCODE %in% c(11101, 11102, 11103, 11104, 11105, 11106) ~ "West Central Queens",
ZIPCODE %in% c(11691, 11692, 11693, 11694, 11695, 11697) ~ "Rockaways",
ZIPCODE %in% c(11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429) ~ "Southeast Queens",
ZIPCODE %in% c(11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421) ~ "Southwest Queens",
ZIPCODE %in% c(11368, 11369, 11370, 11372, 11373, 11377, 11378) ~ "West Queens",
ZIPCODE %in% c(10302, 10303, 10310) ~ "	Port Richmond",
ZIPCODE %in% c(10306, 10307, 10308, 10309, 10312) ~ "South Shore",
ZIPCODE %in% c(10301, 10304, 10305) ~ "Stapleton and St. George",
ZIPCODE %in% c(10314) ~ "Mid-Island"))
monthly.scores <- df %>%
select(CUISINE.DESCRIPTION, SCORE, DATE) %>%
group_by(CUISINE.DESCRIPTION, DATE) %>%
summarise(AVG_SCORE = mean(SCORE, na.rm = T))
res <- read.csv(file="../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
#library(zoo)
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y")))
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y"))) %>% #Create month variable
filter(CUISINE.DESCRIPTION %in% top.ten.cuisines$Var1 & DATE >= "2015-01-01") %>% # Filter relevant cuisines and disregards old dates 2015
mutate(DATE = substr(DATE,1,7))
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y"))) %>% #Create month variable
filter(CUISINE.DESCRIPTION %in% top.ten.cuisines$Var1 & DATE >= "2015-01-01") %>% # Filter relevant cuisines and disregards old dates 2015
mutate(DATE = substr(DATE,1,7))
top.ten.cuisines <- top_n(data.frame(table(res$CUISINE.DESCRIPTION)), 10, Freq)
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y"))) %>% #Create month variable
filter(CUISINE.DESCRIPTION %in% top.ten.cuisines$Var1 & DATE >= "2015-01-01") %>% # Filter relevant cuisines and disregards old dates 2015
mutate(DATE = substr(DATE,1,7))
class(df$DATE)
top.ten.cuisines <- top_n(data.frame(table(res$CUISINE.DESCRIPTION)), 10, Freq)
df <- res %>%
dplyr::select(CUISINE.DESCRIPTION, INSPECTION.DATE, SCORE, ZIPCODE) %>% #Select only relevant columns
mutate(DATE = as.POSIXct(strptime(as.character(res$INSPECTION.DATE), "%m/%d/%Y"))) %>% #Create month variable
filter(CUISINE.DESCRIPTION %in% top.ten.cuisines$Var1 & DATE >= "2015-01-01") %>% # Filter relevant cuisines and disregards old dates 2015
plyr::arrange(DATE) %>%
mutate(DATE = substr(DATE,1,7)) %>%
mutate(NEIGHBOURHOOD = case_when( #Create Neighborhood variable
ZIPCODE %in% c(10453, 10457, 10460) ~ "Central Bronx",
ZIPCODE %in% c(10458, 10467, 10468) ~ "Bronx Park and Fordham",
ZIPCODE %in% c(10451, 10452, 10456) ~ "High Bridge and Morrisania",
ZIPCODE %in% c(10454, 10455, 10459, 10474) ~ "Hunts Point and Mott Haven",
ZIPCODE %in% c(10463, 10471) ~ "Kingsbridge and Riverdale",
ZIPCODE %in% c(10466, 10469, 10470, 104750) ~ "Northeast Bronx",
ZIPCODE %in% c(10461, 10462,10464, 10465, 10472, 10473) ~ "Southeast Bronx",
ZIPCODE %in% c(11212, 11213, 11216, 11233, 11238) ~ "Central Brooklyn	",
ZIPCODE %in% c(11209, 11214, 11228) ~ "Southwest Brooklyn",
ZIPCODE %in% c(11204, 11218, 11219, 11230) ~ "Borough Park",
ZIPCODE %in% c(11234, 11236, 11239) ~ "Canarsie and Flatlands",
ZIPCODE %in% c(11223, 11224, 11229, 11235) ~ "Southern Brooklyn",
ZIPCODE %in% c(11201, 11205, 11215, 11217, 11231) ~ "Northwest Brooklyn",
ZIPCODE %in% c(11203, 11210, 11225, 11226) ~ "Flatbush",
ZIPCODE %in% c(11207, 11208) ~ "East New York and New Lots",
ZIPCODE %in% c(11211, 11222) ~ "Greenpoint",
ZIPCODE %in% c(11220, 11232) ~ "Sunset Park",
ZIPCODE %in% c(11206, 11221, 11237) ~ "Bushwick and Williamsburg",
ZIPCODE %in% c(10026, 10027, 10030, 10037, 10039) ~ "Central Harlem",
ZIPCODE %in% c(10001, 10011, 10018, 10019, 10020, 10036) ~ "Chelsea and Clinton",
ZIPCODE %in% c(10029, 10035) ~ "East Harlem",
ZIPCODE %in% c(10010, 10016, 10017, 10022) ~ "Gramercy Park and Murray Hill",
ZIPCODE %in% c(10012, 10013, 10014) ~ "Greenwich Village and Soho",
ZIPCODE %in% c(10004, 10005, 10006, 10007, 10038, 10280) ~ "Lower Manhattan	",
ZIPCODE %in% c(10002, 10003, 10009) ~ "Lower East Side",
ZIPCODE %in% c(10021, 10028, 10044, 10065, 10075, 10128) ~ "Upper East Side",
ZIPCODE %in% c(10023, 10024, 10025) ~ "Upper West Side",
ZIPCODE %in% c(10031, 10032, 10033, 10034, 10040) ~ "Inwood and Washington Heights",
ZIPCODE %in% c(11361, 11362, 11363, 11364) ~ "Northeast Queens",
ZIPCODE %in% c(11354, 11355, 11356, 11357, 11358, 11359, 11360) ~ "North Queens",
ZIPCODE %in% c(11365, 11366, 11367) ~ "Central Queens",
ZIPCODE %in% c(11412, 11423, 11432, 11433, 11434, 11435, 11436) ~ "Jamaica",
ZIPCODE %in% c(11101, 11102, 11103, 11104, 11105, 11106) ~ "Northwest Queens",
ZIPCODE %in% c(11101, 11102, 11103, 11104, 11105, 11106) ~ "West Central Queens",
ZIPCODE %in% c(11691, 11692, 11693, 11694, 11695, 11697) ~ "Rockaways",
ZIPCODE %in% c(11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429) ~ "Southeast Queens",
ZIPCODE %in% c(11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421) ~ "Southwest Queens",
ZIPCODE %in% c(11368, 11369, 11370, 11372, 11373, 11377, 11378) ~ "West Queens",
ZIPCODE %in% c(10302, 10303, 10310) ~ "	Port Richmond",
ZIPCODE %in% c(10306, 10307, 10308, 10309, 10312) ~ "South Shore",
ZIPCODE %in% c(10301, 10304, 10305) ~ "Stapleton and St. George",
ZIPCODE %in% c(10314) ~ "Mid-Island"))
monthly.scores <- df %>%
select(CUISINE.DESCRIPTION, SCORE, DATE) %>%
group_by(CUISINE.DESCRIPTION, DATE) %>%
summarise(AVG_SCORE = mean(SCORE, na.rm = T))
View(monthly.scores)
monthly.scores <- df %>%
select(CUISINE.DESCRIPTION, SCORE, DATE) %>%
group_by(CUISINE.DESCRIPTION, DATE) %>%
summarise(AVG_SCORE = round(mean(SCORE, na.rm = T),2))
monthly.scores <- df %>%
select(CUISINE.DESCRIPTION, SCORE, DATE) %>%
group_by(CUISINE.DESCRIPTION, DATE) %>%
summarise(AVG_SCORE = round(mean(SCORE, na.rm = T),1))
save(monthly.scores, file="../output/Monthly_avgscores.RData")
quarter.scores <- read.csv("../data/Quarter_scores.csv")
quarter.scores <- read.csv("..fall2019-proj2--sec2-group9/data/Quarter_scores.csv")
quarter.scores <- read.csv("..fall2019-proj2--sec2-grp9/output/Quarter_scores.RData")
quarter.scores <- read.csv("../fall2019-proj2--sec2-grp9/output/Quarter_scores.RData")
quarter.scores <- read.csv(file="../fall2019-proj2--sec2-grp9/output/Quarter_scores.RData")
quarter.scores <- load(file="../fall2019-proj2--sec2-grp9/output/Quarter_scores.RData")
quarter.scores <- load(file="../output/Quarter_scores.RData")
shiny::runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp9/app')
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp9/app')
df_result_omit <- load(file="../output/score_dist.RData")
quarter.scores <- load(file="../output/Quarter_scores.RData")
load('../data/Restaurant_Inspections.RData')
dt1 = na.omit(res,cols = ZIPCODE)
dt1  = dt1[dt1$INSPECTION.DATE != 01/01/1900,]
dt1 = dt1[dt1$GRADE %in% c("A","B","C"),]
df_result<-matrix(NA,nrow=2000,ncol=6)
colnames(df_result) = c("ZIPCODE","YEAR","A","B","C","AVERAGE_SCORE")
var1 = as.character(unlist(lapply(unique(dt1$ZIPCODE),function(x) rep(x,5))))
View(dt1)
